{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "resource": {
        "resourceType": "Library",
        "id": "FHIRHelpers",
        "version": "3.0.0",
        "status": "draft",
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
    <identifier id="FHIRHelpers" version="3.0.0"/>
    <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
    <usings>
        <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
        <def localId="1" localIdentifier="FHIR" uri="http://hl7.org/fhir" version="3.0.0"/>
    </usings>
    <statements>
        <def localId="10" name="ToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="10">
                    <a:s>define function ToInterval(period </a:s>
                    <a:s r="2">
                        <a:s>FHIR.Period</a:s>
                    </a:s>
                    <a:s>):
    </a:s>
                    <a:s r="9">
                        <a:s r="9">
                            <a:s>Interval[</a:s>
                            <a:s r="5">
                                <a:s r="4">
                                    <a:s r="3">
                                        <a:s>period</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="4">
                                        <a:s>&quot;start&quot;</a:s>
                                    </a:s>
                                </a:s>
                                <a:s>.</a:s>
                                <a:s r="5">
                                    <a:s>value</a:s>
                                </a:s>
                            </a:s>
                            <a:s>, </a:s>
                            <a:s r="8">
                                <a:s r="7">
                                    <a:s r="6">
                                        <a:s>period</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="7">
                                        <a:s>&quot;end&quot;</a:s>
                                    </a:s>
                                </a:s>
                                <a:s>.</a:s>
                                <a:s r="8">
                                    <a:s>value</a:s>
                                </a:s>
                            </a:s>
                            <a:s>]</a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="9" lowClosed="true" highClosed="true" xsi:type="Interval">
                <low localId="5" path="value" xsi:type="Property">
                    <source localId="4" path="start" xsi:type="Property">
                        <source localId="3" name="period" xsi:type="OperandRef"/></source>
                </low>
                <high localId="8" path="value" xsi:type="Property">
                    <source localId="7" path="end" xsi:type="Property">
                        <source localId="6" name="period" xsi:type="OperandRef"/></source>
                </high>
            </expression>
            <operand name="period">
                <operandTypeSpecifier localId="2" name="fhir:Period" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="19" name="ToQuantity" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="19">
                    <a:s>define function ToQuantity(quantity </a:s>
                    <a:s r="11">
                        <a:s>FHIR.Quantity</a:s>
                    </a:s>
                    <a:s>):
    </a:s>
                    <a:s r="18">
                        <a:s r="18">
                            <a:s>System.Quantity { </a:s>
                            <a:s>
                                <a:s>value: </a:s>
                                <a:s r="14">
                                    <a:s r="13">
                                        <a:s r="12">
                                            <a:s>quantity</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="13">
                                            <a:s>value</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="14">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>, </a:s>
                            <a:s>
                                <a:s>unit: </a:s>
                                <a:s r="17">
                                    <a:s r="16">
                                        <a:s r="15">
                                            <a:s>quantity</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="16">
                                            <a:s>unit</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="17">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s> }</a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="18" classType="t:Quantity" xsi:type="Instance">
                <element name="value">
                    <value localId="14" path="value" xsi:type="Property">
                        <source localId="13" path="value" xsi:type="Property">
                            <source localId="12" name="quantity" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="unit">
                    <value localId="17" path="value" xsi:type="Property">
                        <source localId="16" path="unit" xsi:type="Property">
                            <source localId="15" name="quantity" xsi:type="OperandRef"/></source>
                    </value>
                </element>
            </expression>
            <operand name="quantity">
                <operandTypeSpecifier localId="11" name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="28" name="ToInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="28">
                    <a:s>define function ToInterval(range </a:s>
                    <a:s r="20">
                        <a:s>FHIR.Range</a:s>
                    </a:s>
                    <a:s>):
    </a:s>
                    <a:s r="27">
                        <a:s r="27">
                            <a:s>Interval[</a:s>
                            <a:s r="23">
                                <a:s>ToQuantity(</a:s>
                                <a:s r="22">
                                    <a:s r="21">
                                        <a:s>range</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="22">
                                        <a:s>low</a:s>
                                    </a:s>
                                </a:s>
                                <a:s>)</a:s>
                            </a:s>
                            <a:s>, </a:s>
                            <a:s r="26">
                                <a:s>ToQuantity(</a:s>
                                <a:s r="25">
                                    <a:s r="24">
                                        <a:s>range</a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="25">
                                        <a:s>high</a:s>
                                    </a:s>
                                </a:s>
                                <a:s>)</a:s>
                            </a:s>
                            <a:s>]</a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="27" lowClosed="true" highClosed="true" xsi:type="Interval">
                <low localId="23" name="ToQuantity" xsi:type="FunctionRef">
                    <operand localId="22" path="low" xsi:type="Property">
                        <source localId="21" name="range" xsi:type="OperandRef"/>
                    </operand>
                </low>
                <high localId="26" name="ToQuantity" xsi:type="FunctionRef">
                    <operand localId="25" path="high" xsi:type="Property">
                        <source localId="24" name="range" xsi:type="OperandRef"/>
                    </operand>
                </high>
            </expression>
            <operand name="range">
                <operandTypeSpecifier localId="20" name="fhir:Range" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="43" name="ToCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="43">
                    <a:s>define function ToCode(coding </a:s>
                    <a:s r="29">
                        <a:s>FHIR.Coding</a:s>
                    </a:s>
                    <a:s>):
    </a:s>
                    <a:s r="42">
                        <a:s r="42">
                            <a:s>System.Code {
      </a:s>
                            <a:s>
                                <a:s>code: </a:s>
                                <a:s r="32">
                                    <a:s r="31">
                                        <a:s r="30">
                                            <a:s>coding</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="31">
                                            <a:s>code</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="32">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>,
      </a:s>
                            <a:s>
                                <a:s>system: </a:s>
                                <a:s r="35">
                                    <a:s r="34">
                                        <a:s r="33">
                                            <a:s>coding</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="34">
                                            <a:s>system</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="35">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>,
      </a:s>
                            <a:s>
                                <a:s>version: </a:s>
                                <a:s r="38">
                                    <a:s r="37">
                                        <a:s r="36">
                                            <a:s>coding</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="37">
                                            <a:s>version</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="38">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>,
      </a:s>
                            <a:s>
                                <a:s>display: </a:s>
                                <a:s r="41">
                                    <a:s r="40">
                                        <a:s r="39">
                                            <a:s>coding</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="40">
                                            <a:s>display</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="41">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>
    }</a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="42" classType="t:Code" xsi:type="Instance">
                <element name="code">
                    <value localId="32" path="value" xsi:type="Property">
                        <source localId="31" path="code" xsi:type="Property">
                            <source localId="30" name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="system">
                    <value localId="35" path="value" xsi:type="Property">
                        <source localId="34" path="system" xsi:type="Property">
                            <source localId="33" name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="version">
                    <value localId="38" path="value" xsi:type="Property">
                        <source localId="37" path="version" xsi:type="Property">
                            <source localId="36" name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="display">
                    <value localId="41" path="value" xsi:type="Property">
                        <source localId="40" path="display" xsi:type="Property">
                            <source localId="39" name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
            </expression>
            <operand name="coding">
                <operandTypeSpecifier localId="29" name="fhir:Coding" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="55" name="ToConcept" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="55">
                    <a:s>define function ToConcept(concept </a:s>
                    <a:s r="44">
                        <a:s>FHIR.CodeableConcept</a:s>
                    </a:s>
                    <a:s>):
    </a:s>
                    <a:s r="54">
                        <a:s r="54">
                            <a:s>System.Concept {
        </a:s>
                            <a:s>
                                <a:s>codes: </a:s>
                                <a:s r="50">
                                    <a:s>
                                        <a:s r="46">
                                            <a:s r="45">
                                                <a:s>
                                                    <a:s>concept.coding</a:s>
                                                </a:s>
                                            </a:s>
                                            <a:s> C</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s> </a:s>
                                    <a:s r="49">
                                        <a:s>return </a:s>
                                        <a:s r="48">
                                            <a:s>ToCode(</a:s>
                                            <a:s r="47">
                                                <a:s>C</a:s>
                                            </a:s>
                                            <a:s>)</a:s>
                                        </a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>,
        </a:s>
                            <a:s>
                                <a:s>display: </a:s>
                                <a:s r="53">
                                    <a:s r="52">
                                        <a:s r="51">
                                            <a:s>concept</a:s>
                                        </a:s>
                                        <a:s>.</a:s>
                                        <a:s r="52">
                                            <a:s>text</a:s>
                                        </a:s>
                                    </a:s>
                                    <a:s>.</a:s>
                                    <a:s r="53">
                                        <a:s>value</a:s>
                                    </a:s>
                                </a:s>
                            </a:s>
                            <a:s>
    }</a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="54" classType="t:Concept" xsi:type="Instance">
                <element name="codes">
                    <value localId="50" xsi:type="Query">
                        <source localId="46" alias="C">
                            <expression localId="45" path="coding" xsi:type="Property">
                                <source name="concept" xsi:type="OperandRef"/>
                            </expression>
                        </source>
                        <return localId="49">
                            <expression localId="48" name="ToCode" xsi:type="FunctionRef">
                                <operand localId="47" name="C" xsi:type="AliasRef"/>
                            </expression>
                        </return>
                    </value>
                </element>
                <element name="display">
                    <value localId="53" path="value" xsi:type="Property">
                        <source localId="52" path="text" xsi:type="Property">
                            <source localId="51" name="concept" xsi:type="OperandRef"/></source>
                    </value>
                </element>
            </expression>
            <operand name="concept">
                <operandTypeSpecifier localId="44" name="fhir:CodeableConcept" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="59" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="59">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="56">
                        <a:s>FHIR.uuid</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="58">
                        <a:s r="58">
                            <a:s r="57">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="58">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="58" path="value" xsi:type="Property">
                <source localId="57" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="56" name="fhir:uuid" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="63" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="63">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="60">
                        <a:s>FHIR.ProvenanceEntityRole</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="62">
                        <a:s r="62">
                            <a:s r="61">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="62">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="62" path="value" xsi:type="Property">
                <source localId="61" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="60" name="fhir:ProvenanceEntityRole" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="67" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="67">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="64">
                        <a:s>FHIR.UnitsOfTime</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="66">
                        <a:s r="66">
                            <a:s r="65">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="66">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="66" path="value" xsi:type="Property">
                <source localId="65" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="64" name="fhir:UnitsOfTime" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="71" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="71">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="68">
                        <a:s>FHIR.AddressType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="70">
                        <a:s r="70">
                            <a:s r="69">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="70">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="70" path="value" xsi:type="Property">
                <source localId="69" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="68" name="fhir:AddressType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="75" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="75">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="72">
                        <a:s>FHIR.AllergyIntoleranceCategory</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="74">
                        <a:s r="74">
                            <a:s r="73">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="74">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="74" path="value" xsi:type="Property">
                <source localId="73" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="72" name="fhir:AllergyIntoleranceCategory" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="79" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="79">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="76">
                        <a:s>FHIR.SpecimenStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="78">
                        <a:s r="78">
                            <a:s r="77">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="78">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="78" path="value" xsi:type="Property">
                <source localId="77" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="76" name="fhir:SpecimenStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="83" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="83">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="80">
                        <a:s>FHIR.RestfulCapabilityMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="82">
                        <a:s r="82">
                            <a:s r="81">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="82">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="82" path="value" xsi:type="Property">
                <source localId="81" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="80" name="fhir:RestfulCapabilityMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="87" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="87">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="84">
                        <a:s>FHIR.DetectedIssueSeverity</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="86">
                        <a:s r="86">
                            <a:s r="85">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="86">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="86" path="value" xsi:type="Property">
                <source localId="85" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="84" name="fhir:DetectedIssueSeverity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="91" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="91">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="88">
                        <a:s>FHIR.IssueSeverity</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="90">
                        <a:s r="90">
                            <a:s r="89">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="90">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="90" path="value" xsi:type="Property">
                <source localId="89" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="88" name="fhir:IssueSeverity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="95" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="95">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="92">
                        <a:s>FHIR.DataElementStringency</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="94">
                        <a:s r="94">
                            <a:s r="93">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="94">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="94" path="value" xsi:type="Property">
                <source localId="93" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="92" name="fhir:DataElementStringency" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="99" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="99">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="96">
                        <a:s>FHIR.EncounterStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="98">
                        <a:s r="98">
                            <a:s r="97">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="98">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="98" path="value" xsi:type="Property">
                <source localId="97" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="96" name="fhir:EncounterStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="103" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="103">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="100">
                        <a:s>FHIR.StructureDefinitionKind</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="102">
                        <a:s r="102">
                            <a:s r="101">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="102">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="102" path="value" xsi:type="Property">
                <source localId="101" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="100" name="fhir:StructureDefinitionKind" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="107" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="107">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="104">
                        <a:s>FHIR.PublicationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="106">
                        <a:s r="106">
                            <a:s r="105">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="106">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="106" path="value" xsi:type="Property">
                <source localId="105" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="104" name="fhir:PublicationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="111" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="111">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="108">
                        <a:s>FHIR.ConsentDataMeaning</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="110">
                        <a:s r="110">
                            <a:s r="109">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="110">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="110" path="value" xsi:type="Property">
                <source localId="109" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="108" name="fhir:ConsentDataMeaning" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="115" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="115">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="112">
                        <a:s>FHIR.QuestionnaireResponseStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="114">
                        <a:s r="114">
                            <a:s r="113">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="114">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="114" path="value" xsi:type="Property">
                <source localId="113" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="112" name="fhir:QuestionnaireResponseStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="119" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="119">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="116">
                        <a:s>FHIR.SearchComparator</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="118">
                        <a:s r="118">
                            <a:s r="117">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="118">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="118" path="value" xsi:type="Property">
                <source localId="117" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="116" name="fhir:SearchComparator" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="123" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="123">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="120">
                        <a:s>FHIR.AllergyIntoleranceType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="122">
                        <a:s r="122">
                            <a:s r="121">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="122">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="122" path="value" xsi:type="Property">
                <source localId="121" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="120" name="fhir:AllergyIntoleranceType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="127" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="127">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="124">
                        <a:s>FHIR.DocumentRelationshipType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="126">
                        <a:s r="126">
                            <a:s r="125">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="126">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="126" path="value" xsi:type="Property">
                <source localId="125" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="124" name="fhir:DocumentRelationshipType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="131" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="131">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="128">
                        <a:s>FHIR.AllergyIntoleranceClinicalStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="130">
                        <a:s r="130">
                            <a:s r="129">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="130">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="130" path="value" xsi:type="Property">
                <source localId="129" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="128" name="fhir:AllergyIntoleranceClinicalStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="135" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="135">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="132">
                        <a:s>FHIR.CarePlanActivityStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="134">
                        <a:s r="134">
                            <a:s r="133">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="134">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="134" path="value" xsi:type="Property">
                <source localId="133" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="132" name="fhir:CarePlanActivityStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="139" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="139">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="136">
                        <a:s>FHIR.ActionList</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="138">
                        <a:s r="138">
                            <a:s r="137">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="138">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="138" path="value" xsi:type="Property">
                <source localId="137" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="136" name="fhir:ActionList" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="143" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="143">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="140">
                        <a:s>FHIR.ParticipationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="142">
                        <a:s r="142">
                            <a:s r="141">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="142">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="142" path="value" xsi:type="Property">
                <source localId="141" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="140" name="fhir:ParticipationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="147" name="ToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="147">
                    <a:s>define function ToDateTime(value </a:s>
                    <a:s r="144">
                        <a:s>FHIR.instant</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="146">
                        <a:s r="146">
                            <a:s r="145">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="146">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="146" path="value" xsi:type="Property">
                <source localId="145" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="144" name="fhir:instant" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="151" name="ToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="151">
                    <a:s>define function ToDateTime(value </a:s>
                    <a:s r="148">
                        <a:s>FHIR.dateTime</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="150">
                        <a:s r="150">
                            <a:s r="149">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="150">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="150" path="value" xsi:type="Property">
                <source localId="149" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="148" name="fhir:dateTime" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="155" name="ToDateTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="155">
                    <a:s>define function ToDateTime(value </a:s>
                    <a:s r="152">
                        <a:s>FHIR.date</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="154">
                        <a:s r="154">
                            <a:s r="153">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="154">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="154" path="value" xsi:type="Property">
                <source localId="153" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="152" name="fhir:date" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="159" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="159">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="156">
                        <a:s>FHIR.DocumentMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="158">
                        <a:s r="158">
                            <a:s r="157">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="158">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="158" path="value" xsi:type="Property">
                <source localId="157" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="156" name="fhir:DocumentMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="163" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="163">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="160">
                        <a:s>FHIR.AssertionOperatorType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="162">
                        <a:s r="162">
                            <a:s r="161">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="162">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="162" path="value" xsi:type="Property">
                <source localId="161" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="160" name="fhir:AssertionOperatorType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="167" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="167">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="164">
                        <a:s>FHIR.DaysOfWeek</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="166">
                        <a:s r="166">
                            <a:s r="165">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="166">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="166" path="value" xsi:type="Property">
                <source localId="165" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="164" name="fhir:DaysOfWeek" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="171" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="171">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="168">
                        <a:s>FHIR.IssueType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="170">
                        <a:s r="170">
                            <a:s r="169">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="170">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="170" path="value" xsi:type="Property">
                <source localId="169" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="168" name="fhir:IssueType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="175" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="175">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="172">
                        <a:s>FHIR.ContentType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="174">
                        <a:s r="174">
                            <a:s r="173">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="174">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="174" path="value" xsi:type="Property">
                <source localId="173" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="172" name="fhir:ContentType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="179" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="179">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="176">
                        <a:s>FHIR.StructureMapContextType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="178">
                        <a:s r="178">
                            <a:s r="177">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="178">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="178" path="value" xsi:type="Property">
                <source localId="177" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="176" name="fhir:StructureMapContextType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="183" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="183">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="180">
                        <a:s>FHIR.FamilyHistoryStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="182">
                        <a:s r="182">
                            <a:s r="181">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="182">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="182" path="value" xsi:type="Property">
                <source localId="181" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="180" name="fhir:FamilyHistoryStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="187" name="ToInteger" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="187">
                    <a:s>define function ToInteger(value </a:s>
                    <a:s r="184">
                        <a:s>FHIR.positiveInt</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="186">
                        <a:s r="186">
                            <a:s r="185">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="186">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="186" path="value" xsi:type="Property">
                <source localId="185" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="184" name="fhir:positiveInt" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="191" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="191">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="188">
                        <a:s>FHIR.ClinicalImpressionStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="190">
                        <a:s r="190">
                            <a:s r="189">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="190">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="190" path="value" xsi:type="Property">
                <source localId="189" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="188" name="fhir:ClinicalImpressionStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="195" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="195">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="192">
                        <a:s>FHIR.AssertionResponseTypes</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="194">
                        <a:s r="194">
                            <a:s r="193">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="194">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="194" path="value" xsi:type="Property">
                <source localId="193" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="192" name="fhir:AssertionResponseTypes" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="199" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="199">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="196">
                        <a:s>FHIR.NarrativeStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="198">
                        <a:s r="198">
                            <a:s r="197">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="198">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="198" path="value" xsi:type="Property">
                <source localId="197" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="196" name="fhir:NarrativeStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="203" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="203">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="200">
                        <a:s>FHIR.MeasmntPrinciple</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="202">
                        <a:s r="202">
                            <a:s r="201">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="202">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="202" path="value" xsi:type="Property">
                <source localId="201" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="200" name="fhir:MeasmntPrinciple" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="207" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="207">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="204">
                        <a:s>FHIR.ConsentExceptType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="206">
                        <a:s r="206">
                            <a:s r="205">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="206">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="206" path="value" xsi:type="Property">
                <source localId="205" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="204" name="fhir:ConsentExceptType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="211" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="211">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="208">
                        <a:s>FHIR.string</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="210">
                        <a:s r="210">
                            <a:s r="209">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="210">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="210" path="value" xsi:type="Property">
                <source localId="209" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="208" name="fhir:string" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="215" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="215">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="212">
                        <a:s>FHIR.EndpointStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="214">
                        <a:s r="214">
                            <a:s r="213">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="214">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="214" path="value" xsi:type="Property">
                <source localId="213" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="212" name="fhir:EndpointStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="219" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="219">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="216">
                        <a:s>FHIR.GuidePageKind</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="218">
                        <a:s r="218">
                            <a:s r="217">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="218">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="218" path="value" xsi:type="Property">
                <source localId="217" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="216" name="fhir:GuidePageKind" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="223" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="223">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="220">
                        <a:s>FHIR.GuideDependencyType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="222">
                        <a:s r="222">
                            <a:s r="221">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="222">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="222" path="value" xsi:type="Property">
                <source localId="221" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="220" name="fhir:GuideDependencyType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="227" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="227">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="224">
                        <a:s>FHIR.ResourceVersionPolicy</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="226">
                        <a:s r="226">
                            <a:s r="225">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="226">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="226" path="value" xsi:type="Property">
                <source localId="225" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="224" name="fhir:ResourceVersionPolicy" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="231" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="231">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="228">
                        <a:s>FHIR.MedicationRequestStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="230">
                        <a:s r="230">
                            <a:s r="229">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="230">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="230" path="value" xsi:type="Property">
                <source localId="229" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="228" name="fhir:MedicationRequestStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="235" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="235">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="232">
                        <a:s>FHIR.MedicationAdministrationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="234">
                        <a:s r="234">
                            <a:s r="233">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="234">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="234" path="value" xsi:type="Property">
                <source localId="233" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="232" name="fhir:MedicationAdministrationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="239" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="239">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="236">
                        <a:s>FHIR.NamingSystemIdentifierType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="238">
                        <a:s r="238">
                            <a:s r="237">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="238">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="238" path="value" xsi:type="Property">
                <source localId="237" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="236" name="fhir:NamingSystemIdentifierType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="243" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="243">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="240">
                        <a:s>FHIR.AccountStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="242">
                        <a:s r="242">
                            <a:s r="241">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="242">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="242" path="value" xsi:type="Property">
                <source localId="241" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="240" name="fhir:AccountStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="247" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="247">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="244">
                        <a:s>FHIR.MedicationDispenseStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="246">
                        <a:s r="246">
                            <a:s r="245">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="246">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="246" path="value" xsi:type="Property">
                <source localId="245" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="244" name="fhir:MedicationDispenseStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="251" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="251">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="248">
                        <a:s>FHIR.IdentifierUse</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="250">
                        <a:s r="250">
                            <a:s r="249">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="250">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="250" path="value" xsi:type="Property">
                <source localId="249" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="248" name="fhir:IdentifierUse" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="255" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="255">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="252">
                        <a:s>FHIR.DigitalMediaType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="254">
                        <a:s r="254">
                            <a:s r="253">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="254">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="254" path="value" xsi:type="Property">
                <source localId="253" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="252" name="fhir:DigitalMediaType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="259" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="259">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="256">
                        <a:s>FHIR.TestReportParticipantType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="258">
                        <a:s r="258">
                            <a:s r="257">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="258">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="258" path="value" xsi:type="Property">
                <source localId="257" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="256" name="fhir:TestReportParticipantType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="263" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="263">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="260">
                        <a:s>FHIR.BindingStrength</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="262">
                        <a:s r="262">
                            <a:s r="261">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="262">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="262" path="value" xsi:type="Property">
                <source localId="261" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="260" name="fhir:BindingStrength" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="267" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="267">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="264">
                        <a:s>FHIR.ParticipantRequired</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="266">
                        <a:s r="266">
                            <a:s r="265">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="266">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="266" path="value" xsi:type="Property">
                <source localId="265" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="264" name="fhir:ParticipantRequired" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="271" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="271">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="268">
                        <a:s>FHIR.XPathUsageType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="270">
                        <a:s r="270">
                            <a:s r="269">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="270">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="270" path="value" xsi:type="Property">
                <source localId="269" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="268" name="fhir:XPathUsageType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="275" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="275">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="272">
                        <a:s>FHIR.StructureMapInputMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="274">
                        <a:s r="274">
                            <a:s r="273">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="274">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="274" path="value" xsi:type="Property">
                <source localId="273" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="272" name="fhir:StructureMapInputMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="279" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="279">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="276">
                        <a:s>FHIR.InstanceAvailability</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="278">
                        <a:s r="278">
                            <a:s r="277">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="278">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="278" path="value" xsi:type="Property">
                <source localId="277" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="276" name="fhir:InstanceAvailability" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="283" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="283">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="280">
                        <a:s>FHIR.id</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="282">
                        <a:s r="282">
                            <a:s r="281">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="282">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="282" path="value" xsi:type="Property">
                <source localId="281" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="280" name="fhir:id" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="287" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="287">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="284">
                        <a:s>FHIR.LinkageType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="286">
                        <a:s r="286">
                            <a:s r="285">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="286">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="286" path="value" xsi:type="Property">
                <source localId="285" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="284" name="fhir:LinkageType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="291" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="291">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="288">
                        <a:s>FHIR.ReferenceHandlingPolicy</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="290">
                        <a:s r="290">
                            <a:s r="289">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="290">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="290" path="value" xsi:type="Property">
                <source localId="289" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="288" name="fhir:ReferenceHandlingPolicy" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="295" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="295">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="292">
                        <a:s>FHIR.FilterOperator</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="294">
                        <a:s r="294">
                            <a:s r="293">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="294">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="294" path="value" xsi:type="Property">
                <source localId="293" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="292" name="fhir:FilterOperator" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="299" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="299">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="296">
                        <a:s>FHIR.NamingSystemType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="298">
                        <a:s r="298">
                            <a:s r="297">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="298">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="298" path="value" xsi:type="Property">
                <source localId="297" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="296" name="fhir:NamingSystemType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="303" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="303">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="300">
                        <a:s>FHIR.ResearchStudyStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="302">
                        <a:s r="302">
                            <a:s r="301">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="302">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="302" path="value" xsi:type="Property">
                <source localId="301" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="300" name="fhir:ResearchStudyStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="307" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="307">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="304">
                        <a:s>FHIR.ExtensionContext</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="306">
                        <a:s r="306">
                            <a:s r="305">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="306">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="306" path="value" xsi:type="Property">
                <source localId="305" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="304" name="fhir:ExtensionContext" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="311" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="311">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="308">
                        <a:s>FHIR.AuditEventOutcome</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="310">
                        <a:s r="310">
                            <a:s r="309">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="310">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="310" path="value" xsi:type="Property">
                <source localId="309" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="308" name="fhir:AuditEventOutcome" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="315" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="315">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="312">
                        <a:s>FHIR.ConstraintSeverity</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="314">
                        <a:s r="314">
                            <a:s r="313">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="314">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="314" path="value" xsi:type="Property">
                <source localId="313" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="312" name="fhir:ConstraintSeverity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="319" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="319">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="316">
                        <a:s>FHIR.EventCapabilityMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="318">
                        <a:s r="318">
                            <a:s r="317">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="318">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="318" path="value" xsi:type="Property">
                <source localId="317" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="316" name="fhir:EventCapabilityMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="323" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="323">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="320">
                        <a:s>FHIR.ResearchSubjectStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="322">
                        <a:s r="322">
                            <a:s r="321">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="322">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="322" path="value" xsi:type="Property">
                <source localId="321" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="320" name="fhir:ResearchSubjectStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="327" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="327">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="324">
                        <a:s>FHIR.StructureMapTransform</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="326">
                        <a:s r="326">
                            <a:s r="325">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="326">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="326" path="value" xsi:type="Property">
                <source localId="325" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="324" name="fhir:StructureMapTransform" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="331" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="331">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="328">
                        <a:s>FHIR.ResponseType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="330">
                        <a:s r="330">
                            <a:s r="329">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="330">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="330" path="value" xsi:type="Property">
                <source localId="329" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="328" name="fhir:ResponseType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="335" name="ToDecimal" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="335">
                    <a:s>define function ToDecimal(value </a:s>
                    <a:s r="332">
                        <a:s>FHIR.decimal</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="334">
                        <a:s r="334">
                            <a:s r="333">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="334">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="334" path="value" xsi:type="Property">
                <source localId="333" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="332" name="fhir:decimal" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="339" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="339">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="336">
                        <a:s>FHIR.AggregationMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="338">
                        <a:s r="338">
                            <a:s r="337">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="338">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="338" path="value" xsi:type="Property">
                <source localId="337" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="336" name="fhir:AggregationMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="343" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="343">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="340">
                        <a:s>FHIR.CapabilityStatementKind</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="342">
                        <a:s r="342">
                            <a:s r="341">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="342">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="342" path="value" xsi:type="Property">
                <source localId="341" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="340" name="fhir:CapabilityStatementKind" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="347" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="347">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="344">
                        <a:s>FHIR.AllergyIntoleranceVerificationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="346">
                        <a:s r="346">
                            <a:s r="345">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="346">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="346" path="value" xsi:type="Property">
                <source localId="345" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="344" name="fhir:AllergyIntoleranceVerificationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="351" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="351">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="348">
                        <a:s>FHIR.EventTiming</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="350">
                        <a:s r="350">
                            <a:s r="349">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="350">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="350" path="value" xsi:type="Property">
                <source localId="349" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="348" name="fhir:EventTiming" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="355" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="355">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="352">
                        <a:s>FHIR.GoalStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="354">
                        <a:s r="354">
                            <a:s r="353">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="354">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="354" path="value" xsi:type="Property">
                <source localId="353" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="352" name="fhir:GoalStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="359" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="359">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="356">
                        <a:s>FHIR.SearchParamType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="358">
                        <a:s r="358">
                            <a:s r="357">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="358">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="358" path="value" xsi:type="Property">
                <source localId="357" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="356" name="fhir:SearchParamType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="363" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="363">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="360">
                        <a:s>FHIR.SystemRestfulInteraction</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="362">
                        <a:s r="362">
                            <a:s r="361">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="362">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="362" path="value" xsi:type="Property">
                <source localId="361" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="360" name="fhir:SystemRestfulInteraction" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="367" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="367">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="364">
                        <a:s>FHIR.StructureMapModelMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="366">
                        <a:s r="366">
                            <a:s r="365">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="366">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="366" path="value" xsi:type="Property">
                <source localId="365" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="364" name="fhir:StructureMapModelMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="371" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="371">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="368">
                        <a:s>FHIR.TaskStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="370">
                        <a:s r="370">
                            <a:s r="369">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="370">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="370" path="value" xsi:type="Property">
                <source localId="369" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="368" name="fhir:TaskStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="375" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="375">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="372">
                        <a:s>FHIR.SubscriptionChannelType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="374">
                        <a:s r="374">
                            <a:s r="373">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="374">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="374" path="value" xsi:type="Property">
                <source localId="373" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="372" name="fhir:SubscriptionChannelType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="379" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="379">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="376">
                        <a:s>FHIR.AssertionDirectionType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="378">
                        <a:s r="378">
                            <a:s r="377">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="378">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="378" path="value" xsi:type="Property">
                <source localId="377" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="376" name="fhir:AssertionDirectionType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="383" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="383">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="380">
                        <a:s>FHIR.SlicingRules</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="382">
                        <a:s r="382">
                            <a:s r="381">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="382">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="382" path="value" xsi:type="Property">
                <source localId="381" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="380" name="fhir:SlicingRules" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="387" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="387">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="384">
                        <a:s>FHIR.ExplanationOfBenefitStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="386">
                        <a:s r="386">
                            <a:s r="385">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="386">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="386" path="value" xsi:type="Property">
                <source localId="385" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="384" name="fhir:ExplanationOfBenefitStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="391" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="391">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="388">
                        <a:s>FHIR.LinkType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="390">
                        <a:s r="390">
                            <a:s r="389">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="390">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="390" path="value" xsi:type="Property">
                <source localId="389" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="388" name="fhir:LinkType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="395" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="395">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="392">
                        <a:s>FHIR.AllergyIntoleranceCriticality</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="394">
                        <a:s r="394">
                            <a:s r="393">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="394">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="394" path="value" xsi:type="Property">
                <source localId="393" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="392" name="fhir:AllergyIntoleranceCriticality" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="399" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="399">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="396">
                        <a:s>FHIR.PropertyRepresentation</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="398">
                        <a:s r="398">
                            <a:s r="397">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="398">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="398" path="value" xsi:type="Property">
                <source localId="397" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="396" name="fhir:PropertyRepresentation" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="403" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="403">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="400">
                        <a:s>FHIR.AuditEventAction</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="402">
                        <a:s r="402">
                            <a:s r="401">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="402">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="402" path="value" xsi:type="Property">
                <source localId="401" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="400" name="fhir:AuditEventAction" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="407" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="407">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="404">
                        <a:s>FHIR.TriggerType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="406">
                        <a:s r="406">
                            <a:s r="405">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="406">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="406" path="value" xsi:type="Property">
                <source localId="405" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="404" name="fhir:TriggerType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="411" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="411">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="408">
                        <a:s>FHIR.SearchModifierCode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="410">
                        <a:s r="410">
                            <a:s r="409">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="410">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="410" path="value" xsi:type="Property">
                <source localId="409" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="408" name="fhir:SearchModifierCode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="415" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="415">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="412">
                        <a:s>FHIR.CompositionStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="414">
                        <a:s r="414">
                            <a:s r="413">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="414">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="414" path="value" xsi:type="Property">
                <source localId="413" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="412" name="fhir:CompositionStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="419" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="419">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="416">
                        <a:s>FHIR.AppointmentStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="418">
                        <a:s r="418">
                            <a:s r="417">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="418">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="418" path="value" xsi:type="Property">
                <source localId="417" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="416" name="fhir:AppointmentStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="423" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="423">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="420">
                        <a:s>FHIR.OperationParameterUse</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="422">
                        <a:s r="422">
                            <a:s r="421">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="422">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="422" path="value" xsi:type="Property">
                <source localId="421" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="420" name="fhir:OperationParameterUse" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="427" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="427">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="424">
                        <a:s>FHIR.ListMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="426">
                        <a:s r="426">
                            <a:s r="425">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="426">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="426" path="value" xsi:type="Property">
                <source localId="425" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="424" name="fhir:ListMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="431" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="431">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="428">
                        <a:s>FHIR.ObservationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="430">
                        <a:s r="430">
                            <a:s r="429">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="430">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="430" path="value" xsi:type="Property">
                <source localId="429" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="428" name="fhir:ObservationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="435" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="435">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="432">
                        <a:s>FHIR.qualityType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="434">
                        <a:s r="434">
                            <a:s r="433">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="434">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="434" path="value" xsi:type="Property">
                <source localId="433" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="432" name="fhir:qualityType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="439" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="439">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="436">
                        <a:s>FHIR.AdministrativeGender</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="438">
                        <a:s r="438">
                            <a:s r="437">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="438">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="438" path="value" xsi:type="Property">
                <source localId="437" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="436" name="fhir:AdministrativeGender" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="443" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="443">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="440">
                        <a:s>FHIR.ResourceType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="442">
                        <a:s r="442">
                            <a:s r="441">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="442">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="442" path="value" xsi:type="Property">
                <source localId="441" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="440" name="fhir:ResourceType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="447" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="447">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="444">
                        <a:s>FHIR.QuestionnaireItemType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="446">
                        <a:s r="446">
                            <a:s r="445">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="446">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="446" path="value" xsi:type="Property">
                <source localId="445" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="444" name="fhir:QuestionnaireItemType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="451" name="ToBoolean" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="451">
                    <a:s>define function ToBoolean(value </a:s>
                    <a:s r="448">
                        <a:s>FHIR.boolean</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="450">
                        <a:s r="450">
                            <a:s r="449">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="450">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="450" path="value" xsi:type="Property">
                <source localId="449" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="448" name="fhir:boolean" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="455" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="455">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="452">
                        <a:s>FHIR.DeviceMetricCalibrationType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="454">
                        <a:s r="454">
                            <a:s r="453">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="454">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="454" path="value" xsi:type="Property">
                <source localId="453" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="452" name="fhir:DeviceMetricCalibrationType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="459" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="459">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="456">
                        <a:s>FHIR.code</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="458">
                        <a:s r="458">
                            <a:s r="457">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="458">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="458" path="value" xsi:type="Property">
                <source localId="457" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="456" name="fhir:code" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="463" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="463">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="460">
                        <a:s>FHIR.SupplyRequestStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="462">
                        <a:s r="462">
                            <a:s r="461">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="462">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="462" path="value" xsi:type="Property">
                <source localId="461" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="460" name="fhir:SupplyRequestStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="467" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="467">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="464">
                        <a:s>FHIR.EncounterLocationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="466">
                        <a:s r="466">
                            <a:s r="465">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="466">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="466" path="value" xsi:type="Property">
                <source localId="465" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="464" name="fhir:EncounterLocationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="471" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="471">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="468">
                        <a:s>FHIR.SupplyDeliveryStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="470">
                        <a:s r="470">
                            <a:s r="469">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="470">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="470" path="value" xsi:type="Property">
                <source localId="469" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="468" name="fhir:SupplyDeliveryStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="475" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="475">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="472">
                        <a:s>FHIR.DiagnosticReportStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="474">
                        <a:s r="474">
                            <a:s r="473">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="474">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="474" path="value" xsi:type="Property">
                <source localId="473" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="472" name="fhir:DiagnosticReportStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="479" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="479">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="476">
                        <a:s>FHIR.FlagStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="478">
                        <a:s r="478">
                            <a:s r="477">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="478">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="478" path="value" xsi:type="Property">
                <source localId="477" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="476" name="fhir:FlagStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="483" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="483">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="480">
                        <a:s>FHIR.CarePlanStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="482">
                        <a:s r="482">
                            <a:s r="481">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="482">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="482" path="value" xsi:type="Property">
                <source localId="481" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="480" name="fhir:CarePlanStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="487" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="487">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="484">
                        <a:s>FHIR.ListStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="486">
                        <a:s r="486">
                            <a:s r="485">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="486">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="486" path="value" xsi:type="Property">
                <source localId="485" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="484" name="fhir:ListStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="491" name="Tobase64Binary" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="491">
                    <a:s>define function Tobase64Binary(value </a:s>
                    <a:s r="488">
                        <a:s>FHIR.base64Binary</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="490">
                        <a:s r="490">
                            <a:s r="489">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="490">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="490" path="value" xsi:type="Property">
                <source localId="489" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="488" name="fhir:base64Binary" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="495" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="495">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="492">
                        <a:s>FHIR.AuditEventAgentNetworkType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="494">
                        <a:s r="494">
                            <a:s r="493">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="494">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="494" path="value" xsi:type="Property">
                <source localId="493" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="492" name="fhir:AuditEventAgentNetworkType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="499" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="499">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="496">
                        <a:s>FHIR.AddressUse</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="498">
                        <a:s r="498">
                            <a:s r="497">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="498">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="498" path="value" xsi:type="Property">
                <source localId="497" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="496" name="fhir:AddressUse" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="503" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="503">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="500">
                        <a:s>FHIR.ConditionalDeleteStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="502">
                        <a:s r="502">
                            <a:s r="501">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="502">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="502" path="value" xsi:type="Property">
                <source localId="501" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="500" name="fhir:ConditionalDeleteStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="507" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="507">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="504">
                        <a:s>FHIR.ContactPointUse</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="506">
                        <a:s r="506">
                            <a:s r="505">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="506">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="506" path="value" xsi:type="Property">
                <source localId="505" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="504" name="fhir:ContactPointUse" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="511" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="511">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="508">
                        <a:s>FHIR.DeviceMetricOperationalStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="510">
                        <a:s r="510">
                            <a:s r="509">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="510">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="510" path="value" xsi:type="Property">
                <source localId="509" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="508" name="fhir:DeviceMetricOperationalStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="515" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="515">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="512">
                        <a:s>FHIR.NutritionOrderStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="514">
                        <a:s r="514">
                            <a:s r="513">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="514">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="514" path="value" xsi:type="Property">
                <source localId="513" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="512" name="fhir:NutritionOrderStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="519" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="519">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="516">
                        <a:s>FHIR.uri</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="518">
                        <a:s r="518">
                            <a:s r="517">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="518">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="518" path="value" xsi:type="Property">
                <source localId="517" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="516" name="fhir:uri" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="523" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="523">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="520">
                        <a:s>FHIR.ContributorType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="522">
                        <a:s r="522">
                            <a:s r="521">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="522">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="522" path="value" xsi:type="Property">
                <source localId="521" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="520" name="fhir:ContributorType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="527" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="527">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="524">
                        <a:s>FHIR.ReferenceVersionRules</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="526">
                        <a:s r="526">
                            <a:s r="525">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="526">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="526" path="value" xsi:type="Property">
                <source localId="525" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="524" name="fhir:ReferenceVersionRules" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="531" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="531">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="528">
                        <a:s>FHIR.Use</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="530">
                        <a:s r="530">
                            <a:s r="529">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="530">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="530" path="value" xsi:type="Property">
                <source localId="529" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="528" name="fhir:Use" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="535" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="535">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="532">
                        <a:s>FHIR.IdentityAssuranceLevel</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="534">
                        <a:s r="534">
                            <a:s r="533">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="534">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="534" path="value" xsi:type="Property">
                <source localId="533" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="532" name="fhir:IdentityAssuranceLevel" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="539" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="539">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="536">
                        <a:s>FHIR.MeasureReportStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="538">
                        <a:s r="538">
                            <a:s r="537">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="538">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="538" path="value" xsi:type="Property">
                <source localId="537" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="536" name="fhir:MeasureReportStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="543" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="543">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="540">
                        <a:s>FHIR.DeviceMetricColor</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="542">
                        <a:s r="542">
                            <a:s r="541">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="542">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="542" path="value" xsi:type="Property">
                <source localId="541" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="540" name="fhir:DeviceMetricColor" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="547" name="ToTime" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="547">
                    <a:s>define function ToTime(value </a:s>
                    <a:s r="544">
                        <a:s>FHIR.time</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="546">
                        <a:s r="546">
                            <a:s r="545">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="546">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="546" path="value" xsi:type="Property">
                <source localId="545" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="544" name="fhir:time" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="551" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="551">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="548">
                        <a:s>FHIR.ConditionalReadStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="550">
                        <a:s r="550">
                            <a:s r="549">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="550">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="550" path="value" xsi:type="Property">
                <source localId="549" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="548" name="fhir:ConditionalReadStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="555" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="555">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="552">
                        <a:s>FHIR.ConditionVerificationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="554">
                        <a:s r="554">
                            <a:s r="553">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="554">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="554" path="value" xsi:type="Property">
                <source localId="553" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="552" name="fhir:ConditionVerificationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="559" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="559">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="556">
                        <a:s>FHIR.AllergyIntoleranceSeverity</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="558">
                        <a:s r="558">
                            <a:s r="557">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="558">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="558" path="value" xsi:type="Property">
                <source localId="557" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="556" name="fhir:AllergyIntoleranceSeverity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="563" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="563">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="560">
                        <a:s>FHIR.OperationKind</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="562">
                        <a:s r="562">
                            <a:s r="561">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="562">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="562" path="value" xsi:type="Property">
                <source localId="561" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="560" name="fhir:OperationKind" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="567" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="567">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="564">
                        <a:s>FHIR.ObservationRelationshipType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="566">
                        <a:s r="566">
                            <a:s r="565">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="566">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="566" path="value" xsi:type="Property">
                <source localId="565" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="564" name="fhir:ObservationRelationshipType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="571" name="ToInteger" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="571">
                    <a:s>define function ToInteger(value </a:s>
                    <a:s r="568">
                        <a:s>FHIR.unsignedInt</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="570">
                        <a:s r="570">
                            <a:s r="569">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="570">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="570" path="value" xsi:type="Property">
                <source localId="569" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="568" name="fhir:unsignedInt" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="575" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="575">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="572">
                        <a:s>FHIR.NameUse</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="574">
                        <a:s r="574">
                            <a:s r="573">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="574">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="574" path="value" xsi:type="Property">
                <source localId="573" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="572" name="fhir:NameUse" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="579" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="579">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="576">
                        <a:s>FHIR.SubscriptionStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="578">
                        <a:s r="578">
                            <a:s r="577">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="578">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="578" path="value" xsi:type="Property">
                <source localId="577" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="576" name="fhir:SubscriptionStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="583" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="583">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="580">
                        <a:s>FHIR.LocationMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="582">
                        <a:s r="582">
                            <a:s r="581">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="582">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="582" path="value" xsi:type="Property">
                <source localId="581" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="580" name="fhir:LocationMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="587" name="ToInteger" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="587">
                    <a:s>define function ToInteger(value </a:s>
                    <a:s r="584">
                        <a:s>FHIR.integer</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="586">
                        <a:s r="586">
                            <a:s r="585">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="586">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="586" path="value" xsi:type="Property">
                <source localId="585" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="584" name="fhir:integer" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="591" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="591">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="588">
                        <a:s>FHIR.repositoryType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="590">
                        <a:s r="590">
                            <a:s r="589">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="590">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="590" path="value" xsi:type="Property">
                <source localId="589" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="588" name="fhir:repositoryType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="595" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="595">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="592">
                        <a:s>FHIR.LocationStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="594">
                        <a:s r="594">
                            <a:s r="593">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="594">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="594" path="value" xsi:type="Property">
                <source localId="593" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="592" name="fhir:LocationStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="599" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="599">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="596">
                        <a:s>FHIR.UnknownContentCode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="598">
                        <a:s r="598">
                            <a:s r="597">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="598">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="598" path="value" xsi:type="Property">
                <source localId="597" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="596" name="fhir:UnknownContentCode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="603" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="603">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="600">
                        <a:s>FHIR.NoteType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="602">
                        <a:s r="602">
                            <a:s r="601">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="602">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="602" path="value" xsi:type="Property">
                <source localId="601" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="600" name="fhir:NoteType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="607" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="607">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="604">
                        <a:s>FHIR.TestReportStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="606">
                        <a:s r="606">
                            <a:s r="605">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="606">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="606" path="value" xsi:type="Property">
                <source localId="605" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="604" name="fhir:TestReportStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="611" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="611">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="608">
                        <a:s>FHIR.HTTPVerb</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="610">
                        <a:s r="610">
                            <a:s r="609">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="610">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="610" path="value" xsi:type="Property">
                <source localId="609" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="608" name="fhir:HTTPVerb" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="615" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="615">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="612">
                        <a:s>FHIR.CodeSystemContentMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="614">
                        <a:s r="614">
                            <a:s r="613">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="614">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="614" path="value" xsi:type="Property">
                <source localId="613" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="612" name="fhir:CodeSystemContentMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="619" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="619">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="616">
                        <a:s>FHIR.EpisodeOfCareStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="618">
                        <a:s r="618">
                            <a:s r="617">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="618">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="618" path="value" xsi:type="Property">
                <source localId="617" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="616" name="fhir:EpisodeOfCareStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="623" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="623">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="620">
                        <a:s>FHIR.RemittanceOutcome</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="622">
                        <a:s r="622">
                            <a:s r="621">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="622">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="622" path="value" xsi:type="Property">
                <source localId="621" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="620" name="fhir:RemittanceOutcome" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="627" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="627">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="624">
                        <a:s>FHIR.ContactPointSystem</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="626">
                        <a:s r="626">
                            <a:s r="625">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="626">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="626" path="value" xsi:type="Property">
                <source localId="625" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="624" name="fhir:ContactPointSystem" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="631" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="631">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="628">
                        <a:s>FHIR.SlotStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="630">
                        <a:s r="630">
                            <a:s r="629">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="630">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="630" path="value" xsi:type="Property">
                <source localId="629" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="628" name="fhir:SlotStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="635" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="635">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="632">
                        <a:s>FHIR.PropertyType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="634">
                        <a:s r="634">
                            <a:s r="633">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="634">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="634" path="value" xsi:type="Property">
                <source localId="633" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="632" name="fhir:PropertyType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="639" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="639">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="636">
                        <a:s>FHIR.markdown</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="638">
                        <a:s r="638">
                            <a:s r="637">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="638">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="638" path="value" xsi:type="Property">
                <source localId="637" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="636" name="fhir:markdown" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="643" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="643">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="640">
                        <a:s>FHIR.TypeDerivationRule</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="642">
                        <a:s r="642">
                            <a:s r="641">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="642">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="642" path="value" xsi:type="Property">
                <source localId="641" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="640" name="fhir:TypeDerivationRule" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="647" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="647">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="644">
                        <a:s>FHIR.MedicationStatementStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="646">
                        <a:s r="646">
                            <a:s r="645">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="646">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="646" path="value" xsi:type="Property">
                <source localId="645" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="644" name="fhir:MedicationStatementStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="651" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="651">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="648">
                        <a:s>FHIR.GuidanceResponseStatus</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="650">
                        <a:s r="650">
                            <a:s r="649">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="650">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="650" path="value" xsi:type="Property">
                <source localId="649" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="648" name="fhir:GuidanceResponseStatus" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="655" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="655">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="652">
                        <a:s>FHIR.QuantityComparator</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="654">
                        <a:s r="654">
                            <a:s r="653">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="654">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="654" path="value" xsi:type="Property">
                <source localId="653" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="652" name="fhir:QuantityComparator" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="659" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="659">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="656">
                        <a:s>FHIR.RelatedArtifactType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="658">
                        <a:s r="658">
                            <a:s r="657">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="658">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="658" path="value" xsi:type="Property">
                <source localId="657" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="656" name="fhir:RelatedArtifactType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="663" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="663">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="660">
                        <a:s>FHIR.oid</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="662">
                        <a:s r="662">
                            <a:s r="661">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="662">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="662" path="value" xsi:type="Property">
                <source localId="661" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="660" name="fhir:oid" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="667" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="667">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="664">
                        <a:s>FHIR.MeasureReportType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="666">
                        <a:s r="666">
                            <a:s r="665">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="666">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="666" path="value" xsi:type="Property">
                <source localId="665" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="664" name="fhir:MeasureReportType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="671" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="671">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="668">
                        <a:s>FHIR.CompartmentType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="670">
                        <a:s r="670">
                            <a:s r="669">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="670">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="670" path="value" xsi:type="Property">
                <source localId="669" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="668" name="fhir:CompartmentType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="675" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="675">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="672">
                        <a:s>FHIR.CompositionAttestationMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="674">
                        <a:s r="674">
                            <a:s r="673">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="674">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="674" path="value" xsi:type="Property">
                <source localId="673" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="672" name="fhir:CompositionAttestationMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="679" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="679">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="676">
                        <a:s>FHIR.DeviceMetricCalibrationState</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="678">
                        <a:s r="678">
                            <a:s r="677">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="678">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="678" path="value" xsi:type="Property">
                <source localId="677" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="676" name="fhir:DeviceMetricCalibrationState" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="683" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="683">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="680">
                        <a:s>FHIR.GroupType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="682">
                        <a:s r="682">
                            <a:s r="681">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="682">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="682" path="value" xsi:type="Property">
                <source localId="681" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="680" name="fhir:GroupType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="687" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="687">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="684">
                        <a:s>FHIR.TypeRestfulInteraction</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="686">
                        <a:s r="686">
                            <a:s r="685">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="686">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="686" path="value" xsi:type="Property">
                <source localId="685" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="684" name="fhir:TypeRestfulInteraction" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="691" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="691">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="688">
                        <a:s>FHIR.CodeSystemHierarchyMeaning</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="690">
                        <a:s r="690">
                            <a:s r="689">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="690">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="690" path="value" xsi:type="Property">
                <source localId="689" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="688" name="fhir:CodeSystemHierarchyMeaning" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="695" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="695">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="692">
                        <a:s>FHIR.BundleType</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="694">
                        <a:s r="694">
                            <a:s r="693">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="694">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="694" path="value" xsi:type="Property">
                <source localId="693" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="692" name="fhir:BundleType" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def localId="699" name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <annotation xsi:type="a:Annotation">
                <a:s r="699">
                    <a:s>define function ToString(value </a:s>
                    <a:s r="696">
                        <a:s>FHIR.SystemVersionProcessingMode</a:s>
                    </a:s>
                    <a:s>): </a:s>
                    <a:s r="698">
                        <a:s r="698">
                            <a:s r="697">
                                <a:s>value</a:s>
                            </a:s>
                            <a:s>.</a:s>
                            <a:s r="698">
                                <a:s>value</a:s>
                            </a:s>
                        </a:s>
                    </a:s>
                </a:s>
            </annotation>
            <expression localId="698" path="value" xsi:type="Property">
                <source localId="697" name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier localId="696" name="fhir:SystemVersionProcessingMode" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
    </statements>
</library>"
          }
        ]
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "PDDICDSCommon",
        "version": "1.0",
        "status": "draft",
        "url": "http://hl7.org/fhir/ig/PDDI-CDS/Library/PDDICDSCommon",
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
    <identifier id="PDDICDSCommon" version="1.0"/>
    <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
    <usings>
        <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
        <def localIdentifier="FHIR" uri="http://hl7.org/fhir" version="3.0.0"/>
    </usings>
    <statements>
        <def name="GetConditionName" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression xsi:type="If">
                <condition asType="t:Boolean" xsi:type="As">
                    <operand xsi:type="Not">
                        <operand xsi:type="IsNull">
                            <operand name="condition" xsi:type="OperandRef"/></operand>
                    </operand>
                </condition>
                <then path="value" xsi:type="Property">
                    <source path="display" xsi:type="Property">
                        <source xsi:type="Indexer">
                            <operand path="coding" xsi:type="Property">
                                <source path="code" xsi:type="Property">
                                    <source name="condition" xsi:type="OperandRef"/></source>
                            </operand>
                            <operand valueType="t:Integer" value="0" xsi:type="Literal"/>
                        </source>
                    </source>
                </then>
                <else valueType="t:String" value="NA" xsi:type="Literal"/>
            </expression>
            <operand name="condition">
                <operandTypeSpecifier name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="GetAssertedDate" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression xsi:type="If">
                <condition asType="t:Boolean" xsi:type="As">
                    <operand xsi:type="Not">
                        <operand xsi:type="IsNull">
                            <operand name="condition" xsi:type="OperandRef"/></operand>
                    </operand>
                </condition>
                <then xsi:type="ToString">
                    <operand path="value" xsi:type="Property">
                        <source path="assertedDate" xsi:type="Property">
                            <source name="condition" xsi:type="OperandRef"/></source>
                    </operand>
                </then>
                <else valueType="t:String" value="NA" xsi:type="Literal"/>
            </expression>
            <operand name="condition">
                <operandTypeSpecifier name="fhir:Condition" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="ToQuantity" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression classType="t:Quantity" xsi:type="Instance">
                <element name="value">
                    <value path="value" xsi:type="Property">
                        <source path="value" xsi:type="Property">
                            <source name="quantity" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="unit">
                    <value path="value" xsi:type="Property">
                        <source path="unit" xsi:type="Property">
                            <source name="quantity" xsi:type="OperandRef"/></source>
                    </value>
                </element>
            </expression>
            <operand name="quantity">
                <operandTypeSpecifier name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="GetLevelAndDate" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression xsi:type="If">
                <condition asType="t:Boolean" xsi:type="As">
                    <operand xsi:type="Not">
                        <operand xsi:type="IsNull">
                            <operand name="observation" xsi:type="OperandRef"/></operand>
                    </operand>
                </condition>
                <then xsi:type="Concatenate">
                    <operand xsi:type="Concatenate">
                        <operand xsi:type="ToString">
                            <operand name="ToQuantity" xsi:type="FunctionRef">
                                <operand strict="false" xsi:type="As">
                                    <operand path="value" xsi:type="Property">
                                        <source name="observation" xsi:type="OperandRef"/>
                                    </operand>
                                    <asTypeSpecifier name="fhir:Quantity" xsi:type="NamedTypeSpecifier"/>
                                </operand>
                            </operand>
                        </operand>
                        <operand valueType="t:String" value=" and " xsi:type="Literal"/></operand>
                    <operand xsi:type="ToString">
                        <operand path="value" xsi:type="Property">
                            <source path="effective" xsi:type="Property">
                                <source name="observation" xsi:type="OperandRef"/></source>
                        </operand>
                    </operand>
                </then>
                <else valueType="t:String" value="NA" xsi:type="Literal"/>
            </expression>
            <operand name="observation">
                <operandTypeSpecifier name="fhir:Observation" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="ToCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression classType="t:Code" xsi:type="Instance">
                <element name="code">
                    <value path="value" xsi:type="Property">
                        <source path="code" xsi:type="Property">
                            <source name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="system">
                    <value path="value" xsi:type="Property">
                        <source path="system" xsi:type="Property">
                            <source name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="version">
                    <value path="value" xsi:type="Property">
                        <source path="version" xsi:type="Property">
                            <source name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
                <element name="display">
                    <value path="value" xsi:type="Property">
                        <source path="display" xsi:type="Property">
                            <source name="coding" xsi:type="OperandRef"/></source>
                    </value>
                </element>
            </expression>
            <operand name="coding">
                <operandTypeSpecifier name="fhir:Coding" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="GetMedicationNames" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression xsi:type="Query">
                <source alias="M">
                    <expression name="medications" xsi:type="OperandRef"/>
                </source>
                <return>
                    <expression path="display" xsi:type="Property">
                        <source name="ToCode" xsi:type="FunctionRef">
                            <operand xsi:type="Indexer">
                                <operand path="coding" xsi:type="Property">
                                    <source path="medication" scope="M" xsi:type="Property"/>
                                </operand>
                                <operand valueType="t:Integer" value="0" xsi:type="Literal"/></operand>
                        </source>
                    </expression>
                </return>
            </expression>
            <operand name="medications">
                <operandTypeSpecifier xsi:type="ListTypeSpecifier">
                    <elementType name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
                </operandTypeSpecifier>
            </operand>
        </def>
        <def name="GetDrugNames" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression xsi:type="Combine">
                <source xsi:type="Flatten">
                    <operand xsi:type="Query">
                        <source alias="X">
                            <expression xsi:type="Query">
                                <source alias="coding">
                                    <expression name="codings" xsi:type="OperandRef"/>
                                </source>
                                <return>
                                    <expression path="display" xsi:type="Property">
                                        <source name="ToCode" xsi:type="FunctionRef">
                                            <operand name="coding" xsi:type="AliasRef"/>
                                        </source>
                                    </expression>
                                </return>
                            </expression>
                        </source>
                        <return distinct="false">
                            <expression xsi:type="ToList">
                                <operand name="X" xsi:type="AliasRef"/>
                            </expression>
                        </return>
                    </operand>
                </source>
                <separator valueType="t:String" value=", " xsi:type="Literal"/>
            </expression>
            <operand name="codings">
                <operandTypeSpecifier xsi:type="ListTypeSpecifier">
                    <elementType name="fhir:Coding" xsi:type="NamedTypeSpecifier"/>
                </operandTypeSpecifier>
            </operand>
        </def>
        <def name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression path="value" xsi:type="Property">
                <source path="display" xsi:type="Property">
                    <source name="value" xsi:type="OperandRef"/></source>
            </expression>
            <operand name="value">
                <operandTypeSpecifier name="fhir:Coding" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
        <def name="ToString" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
            <expression path="display" xsi:type="Property">
                <source name="value" xsi:type="OperandRef"/>
            </expression>
            <operand name="value">
                <operandTypeSpecifier name="t:Code" xsi:type="NamedTypeSpecifier"/>
            </operand>
        </def>
    </statements>
</library>"
          }
        ]
      }
    }
  ]
}
